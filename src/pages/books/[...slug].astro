---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { existsSync } from "fs";

export async function getStaticPaths() {
  const bookReviews = await getCollection("bookReviews");
  return bookReviews.map((book) => ({
    params: { slug: book.slug },
    props: book,
  }));
}
type Props = CollectionEntry<"bookReviews">;

const book = Astro.props;
const { Content } = await book.render();

// Handle cover image
let coverImage;
if (book.data.coverImage) {
  try {
    coverImage = book.data.coverImage.startsWith("src/")
      ? (await import(/* @vite-ignore */ `../../../${book.data.coverImage}`))
          .default
      : book.data.coverImage;
  } catch (e) {
    console.error(`Could not load cover image for ${book.data.title}:`, e);
  }
}
---

<BaseLayout>
  <article class="book-review">
    <header>
      <div class="book-container">
        <div class="book-meta">
          <h1>{book.data.title}</h1>
          <p class="book-author">by <strong>{book.data.author}</strong></p>

          {
            book.data.rating && (
              <div class="book-rating">
                <span class="stars">
                  {"★".repeat(book.data.rating)}
                  {"☆".repeat(5 - book.data.rating)}
                </span>
                <span class="rating-text">{book.data.rating} / 5</span>
              </div>
            )
          }

          <div class="book-dates">
            {
              book.data.readDate && (
                <p class="read-date">
                  <span class="meta-label">Read on:</span>{" "}
                  {book.data.readDate.toLocaleDateString()}
                </p>
              )
            }
            <p class="review-date">
              <span class="meta-label">Reviewed:</span>
              {book.data.pubDate.toLocaleDateString()}
            </p>
            {
              book.data.updatedDate && (
                <p class="updated-date">
                  <span class="meta-label">Updated:</span>{" "}
                  {book.data.updatedDate.toLocaleDateString()}
                </p>
              )
            }
          </div>

          {
            book.data.isbn && (
              <p class="book-isbn">
                <span class="meta-label">ISBN:</span> {book.data.isbn}
              </p>
            )
          }

          {
            book.data.amazonLink && (
              <p class="book-amazon">
                <span class="meta-label">Buy:</span>{" "}
                <a
                  href={book.data.amazonLink}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="amazon-link"
                >
                  Amazon <span class="external-link-icon">↗</span>
                </a>
              </p>
            )
          }

          {
            book.data.genre && book.data.genre.length > 0 && (
              <div class="book-genres">
                <span class="meta-label">Genres:</span>
                <div class="genre-list">
                  {book.data.genre.map((g, i) => (
                    <span class="genre-tag">{g}</span>
                  ))}
                </div>
              </div>
            )
          }
        </div>

        <div class="book-cover">
          {
            book.data.coverImage && (
              <div class="cover-image">
                {typeof coverImage === "string" ? (
                  <img src={coverImage} alt={`Cover for ${book.data.title}`} />
                ) : coverImage ? (
                  <Image
                    src={coverImage}
                    alt={`Cover for ${book.data.title}`}
                    width={300}
                    height={450}
                    quality={80}
                  />
                ) : null}
              </div>
            )
          }
        </div>
      </div>
    </header>

    <div class="book-content prose">
      <Content />
    </div>

    {
      book.data.tags && book.data.tags.length > 0 && (
        <div class="tags">
          {book.data.tags.map((tag) => (
            <a href={`/tags/${tag}/`}>#{tag}</a>
          ))}
        </div>
      )
    }
  </article>
</BaseLayout>

<style>
  .book-review {
    max-width: 800px;
    margin: 0 auto;
  }

  header {
    margin-bottom: 2rem;
  }

  .book-container {
    display: flex;
    gap: 1.5rem;
    background-color: var(--bg-secondary);
    padding: 1.5rem;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .book-meta {
    flex: 3;
    min-width: 280px;
    color: var(--text-secondary);
    font-size: 1rem;
    padding-right: 1rem;
  }

  .book-cover {
    flex: 1;
    min-width: 160px;
    max-width: 180px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  h1 {
    margin-bottom: 0.75rem;
    line-height: 1.2;
    color: var(--text-primary);
  }

  .book-author {
    font-size: 1.3rem;
    margin-bottom: 1rem;
    color: var(--text-primary);
  }

  .book-rating {
    display: flex;
    align-items: center;
    margin-bottom: 1.25rem;
  }

  .stars {
    color: #f5a623;
    margin-right: 0.5rem;
    font-size: 1.2rem;
  }

  .rating-text {
    font-weight: bold;
  }

  .meta-label {
    font-weight: bold;
    margin-right: 0.5rem;
    color: var(--text-primary);
  }

  .book-dates {
    margin-bottom: 1rem;
  }

  .book-dates p {
    margin: 0.5rem 0;
  }

  .book-genres {
    margin-top: 1.5rem;
    margin-bottom: 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 1rem;
  }

  .genre-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .genre-tag {
    background-color: var(--bg-primary);
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    font-size: 0.9rem;
    display: inline-block;
  }

  .book-isbn,
  .book-amazon {
    font-size: 0.9rem;
    margin-top: 0.75rem;
  }

  .amazon-link {
    color: var(--text-link);
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
  }

  .amazon-link:hover {
    text-decoration: underline;
  }

  .external-link-icon {
    font-size: 0.8em;
    margin-left: 0.2em;
  }

  .cover-image {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    margin-top: 0;
    padding-top: 0;
    width: 100%;
  }

  .cover-image img,
  .cover-image :global(img) {
    max-width: 160px;
    height: auto;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    border-radius: 8px;
    margin-top: 0;
  }

  @media (max-width: 768px) {
    .book-container {
      flex-direction: column-reverse;
      gap: 2rem;
    }

    .book-cover {
      margin: 0 auto 1rem auto;
      max-width: 180px;
      justify-content: center;
    }

    .book-meta {
      padding-right: 0;
    }

    .cover-image {
      justify-content: center;
    }

    .cover-image img,
    .cover-image :global(img) {
      max-width: 160px;
      margin: 0 auto;
    }
  }

  .book-content {
    line-height: 1.6;
  }

  /* Tags styling to match article tags */
  .tags {
    display: flex;
    justify-content: center;
    column-gap: 0.75em;
    flex-wrap: wrap;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--line);
  }

  .tags a {
    font-weight: normal;
    text-decoration: none;
  }

  .tags a:hover {
    color: var(--text-secondary);
  }
</style>
